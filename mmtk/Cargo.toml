[package]
name = "mmtk_openjdk"
version = "0.30.0"
authors = [" <>"]
rust-version = "1.74.1"
build = "build.rs"
edition = "2021"

[lib]
name = "mmtk_openjdk"
# be careful - LTO is only allowed for certain crate types
crate-type = ["cdylib"]

[profile.dev]
panic = "abort"
codegen-units = 24

[profile.release]
lto = true
codegen-units = 1
# codegen-units = 24
# debug-assertions = true
# debug = true

# Metadata for the OpenJDK repository
[package.metadata.openjdk]
# Our CI matches the following line and extract mmtk/openjdk. If this line is updated, please check ci yaml files and make sure it works.
openjdk_repo = "https://github.com/mmtk/openjdk.git"
openjdk_version = "7caf8f7d19b19a9fd53be6f909db805246790807"

[dependencies]
libc = "0.2.138"
lazy_static = "1.4.0"
spin = { version = "0.9.4", features = ["std"] }
once_cell = "1.16.0"
atomic = "0.6.0"
memoffset = "0.9.0"
cfg-if = "1.0"
probe = "0.5"

# Be very careful to commit any changes to the following mmtk dependency, as our CI scripts (including mmtk-core CI)
# rely on matching these lines to modify them: e.g. comment out the git dependency and use the local path.
# These changes are safe:
# - change branch
# - change repo name
# But other changes including adding/removing whitespaces in commented lines may break the CI.
# mmtk = { git = "https://github.com/wenyuzhao/mmtk-core.git", rev = "97443c056874fb3c9aa447e42d264c28b30af84d" }
# Uncomment the following to build locally
# mmtk = { path = "../../mmtk-core" }
[dependencies.mmtk]
path = "../../mmtk-core"
features = [
    "satb_timer",
    "yield_and_roots_timer",
    "pause_time",
    "survival_ratio",
    "log_gc",
    "log_stages",
    # "log_work_packets", # Get a lot of useless informations
    "measure_trace_rate",
    "measure_rc_rate",
    "perf_counter",
    "work_packet_counter",
    "ix_always_defrag",
    "lxr_precise_incs_counter",
    "lxr_release_stage_timer",
    "remset_counter",
    "lxr_satb_live_bytes_counter",
    "rust_mem_counter",
    # "log_outstanding_packets",
    # "log_all_inc_packets",
    "lxr_log_reclaim",
    "lxr_srv_ratio_counter",
]

[build-dependencies]
built = { version = "0.7.7", features = ["git2"] }

[features]
default = []
gc_log_new_chunk = ["mmtk/gc_log_new_chunk"] # Get a lot of informations, enable with caution!
release_debug_assertions = []
mmtk_extreme_assertions = ["mmtk/extreme_assertions"]
nogc_lock_free = ["mmtk/nogc_lock_free"]
nogc_no_zeroing = ["mmtk/nogc_no_zeroing"]
# Use the env var MMTK_VO_BIT=1 when building OpenJDK so the fastpath for setting the alloc bit will be compiled in.
# See README.
vo_bit = ["mmtk/vo_bit"]
no_fast_alloc = []
roots_breakdown = []
same_stw_and_conc_threads = []
lxr_6_conc_workers = []
lxr_12_conc_workers = []
g3_compatibilities = []

# Place the mark bit in the header of objects instead of on the side.
mark_bit_in_header = []

# Place the forwarding bits on the side instead of in the header of objects.
forwarding_bits_on_side = []

# Use malloc mark sweep - we should only run marksweep with this feature turned on.
malloc_mark_sweep = ["mmtk/malloc_mark_sweep"]

# We can select plan at runtime. So no need to use any of these features.
# However, if any of these is provided during build-time, we will ignore any runtime flag and
# always run this plan. Performance-wise there is no difference. The main reason for these features
# is to temporarily allow running performance tests without changing performance scripts.
nogc = []
semispace = []
gencopy = []
marksweep = []
pageprotect = []
immix = []
genimmix = []
stickyimmix = []
markcompact = []

sanity = ["mmtk/sanity"]
barrier_measurement = ["mmtk/barrier_measurement"]
yield_and_roots_timer = ["mmtk/yield_and_roots_timer"]
satb_timer = ["mmtk/satb_timer"]
instrumentation = ["mmtk/instrumentation", "no_fast_alloc"]
log_gc = ["mmtk/log_gc"]
log_stages = ["mmtk/log_stages"]
log_work_packets = ["mmtk/log_work_packets"]
object_size_distribution = ["mmtk/object_size_distribution"]
discontig_space = []

# Compressed pointer experiments
force_narrow_oop_mode = []
narrow_oop_mode_32bit = ["force_narrow_oop_mode"]
narrow_oop_mode_shift = ["force_narrow_oop_mode"]
narrow_oop_mode_base = ["force_narrow_oop_mode"]
narrow_oop_mode_base_and_shift = ["force_narrow_oop_mode"]

field_barrier_no_eager_branch = []
field_barrier_no_arraycopy = []
field_barrier_no_arraycopy_slow = []
field_barrier_no_c2_slow_call = []
field_barrier_no_c2_rust_call = []
